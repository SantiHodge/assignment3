class Scatterplot {

    /**
     * Class constructor with basic chart configuration
     */
    constructor(_config, _data) {
        this.config = {
            parentElement: _config.parentElement,
            containerWidth: _config.containerWidth || 600,
            containerHeight: _config.containerHeight || 500,
            margin: _config.margin || {top: 25, right: 20, bottom: 20, left: 50},
        }
        this.data = _data;
        this.initVis();
    }

    /**
     * We initialize scales/axes and append static elements, such as axis titles.
     */
    initVis() {
        let vis = this;

        // Calculate inner chart size. Margin specifies the space around the actual chart.
        vis.width = vis.config.containerWidth - vis.config.margin.left - vis.config.margin.right;
        vis.height = vis.config.containerHeight - vis.config.margin.top - vis.config.margin.bottom;

        // Scales
        vis.xScale = d3.scaleLinear()
            .range([0, vis.width])
        vis.yScale = d3.scaleLinear()
            .range([vis.height, 0])

        // Initialize axes
        vis.xAxis = d3.axisBottom(vis.xScale)
        vis.yAxis = d3.axisLeft(vis.yScale)

        // Define size of SVG drawing area
        vis.svg = d3.select(vis.config.parentElement).append('svg')
            .attr('width', this.config.containerWidth)
            .attr('height', this.config.containerHeight)

        // Append group element that will contain our actual chart
        // and position it according to the given margin config
        vis.visG = vis.svg.append('g')
            .attr('transform', `translate(${this.config.margin.left},${this.config.margin.top})`)

        // Append empty x-axis group and move it to the bottom of the chart
        vis.xAxisG = vis.svg.append('g')
            .attr('transform', `translate(${this.config.margin.left},${this.config.margin.top + vis.height})`)

        // Append y-axis group
        vis.yAxisG = vis.svg.append('g')
            .attr('transform', `translate(${this.config.margin.left},${this.config.margin.top})`)

    }

    /**
     * Prepare the data and scales before we render it.
     */
    updateVis() {
        let vis = this;

        // Specificy accessor functions

        // Set the scale input domains
        vis.xScale.domain([0, d3.max(vis.data, d => d["Urban population (% of total population)"])])
        vis.yScale.domain([0, d3.max(vis.data, d => d["GDP per capita (current US$)"])])
        this.renderVis()
    }

    /**
     * Bind data to visual elements.
     */
    renderVis() {
        let vis = this;

        // Add circles
        const circles = vis.visG.selectAll('circle').data(vis.data, d => d.city)
            .join('circle')

        const maxGva = d3.max(vis.data, d => Math.max(d["Economy: Agriculture (% of GVA)"], d["Economy: Industry (% of GVA)"], d["Economy: Services and other activity (% of GVA)"]));

        circles
            .transition()
            .duration(3000)
            .attr('cx', d => vis.xScale(d["Urban population (% of total population)"]))
            .attr('cy', d => vis.yScale(d["GDP per capita (current US$)"]))
            .attr('r', d => Math.min(vis.yScale(d["GDP: Gross domestic product (million current US$)"]) / 25, 20))
            .attr('fill', d => {
                // Get the highest GVA value and its corresponding attribute
                const maxGva = Math.max(d["Economy: Agriculture (% of GVA)"], d["Economy: Industry (% of GVA)"], d["Economy: Services and other activity (% of GVA)"]);
                let highestAttribute;
                if (maxGva === d["Economy: Agriculture (% of GVA)"]) {
                    highestAttribute = "Economy: Agriculture (% of GVA)";
                } else if (maxGva === d["Economy: Industry (% of GVA)"]) {
                    highestAttribute = "Economy: Industry (% of GVA)";
                } else {
                    highestAttribute = "Economy: Services and other activity (% of GVA)";
                }

                // Define a color scale for each attribute
                const colorScales = {
                    "Economy: Agriculture (% of GVA)": d3.scaleLinear().domain([0, 100]).range(["#f0f0f0", "#00ff24"]), // Change the colors as desired
                    "Economy: Industry (% of GVA)": d3.scaleLinear().domain([0, 100]).range(["#f0f0f0", "#ff0000"]), // Change the colors as desired
                    "Economy: Services and other activity (% of GVA)": d3.scaleLinear().domain([0, 100]).range(["#f0f0f0", "#0000FF"]) // Change the colors as desired
                };

                // Use the color scale corresponding to the highest attribute to map the highest GVA value to a fill color
                return colorScales[highestAttribute](maxGva);
            });
        circles
            .on('mouseover', (event,d) => {
                d3.select('#tooltip')
                    .style('display', 'block')
                    .style('left', (event.pageX ) + 'px')
                    .style('top', (event.pageY) + 'px')
                    .html(`
              <div class="tooltip-title">${d.country}</div>
              <ul>
                   <li>Urban Population %: ${d["Urban population (% of total population)"]}</li>
                   <li>GDP per Capita: ${d["GDP per capita (current US$)"]}</li>
                   <li>Total GDP: ${d["GDP: Gross domestic product (million current US$)"]}</li>
                   <li>GVA of economy from Industry %: ${d["Economy: Agriculture (% of GVA)"]}</li>
                   <li>GVA of economy from Agriculture %: ${d["Economy: Industry (% of GVA)"]}</li>
                   <li>GVA of economy from Services and other Activity %: ${d["Economy: Services and other activity (% of GVA)"]}</li>
                   
              </ul>
            `);
            })
            .on('mouseleave', () => {
                d3.select('#tooltip').style('display', 'none');
            });

        // Update the axes
        vis.xAxisG.call(this.xAxis)
        vis.yAxisG.call(this.yAxis)
    }
}
